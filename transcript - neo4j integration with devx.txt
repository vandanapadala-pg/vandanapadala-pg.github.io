[00:00]
[Speaker 1]
Uh, we are, uh, we need the data from EKB, right? Like the repository and all that information. So, for that reason, uh, we want to like use these services or, uh, which are already existing or, uh, we want to integrate the EKB in our application.

[00:21]
[Speaker 2]
Yeah, I mean, you can connect directly to we have a read-only database. You could you could do that. You could connect to it and, you know, call a cipher with cipher. Um, I I guess, uh, I wasn't sure if you also needed the agentic side as well.

[00:41]
[Speaker 1]
Uh, no, no. Agentic side, it's from our side. So we just needed the data, yeah.

[00:46]
[Speaker 2]
So we can get you um, credenti, you know, we'll send over the read-only, um, credentials.

[00:52]
[Speaker 1]
Okay, yeah. Okay.

[00:53]
[Speaker 2]
And and um, you can start start with that and if you need help, I mean, I assume you have all the things you need to write queries or things, but if you need help understanding like the data model, so you know what queries to write, um, you could, you know, put get together with me or Jeffrey.

[01:14]
[Speaker 1]
Okay, okay. Sure, sure, sure, sure. Okay. So, we can, uh, okay, so, uh, for the data modeling, you you you also have the, uh, schemas information, like, uh, what schema has each data and all.

[01:31]
[Speaker 2]
Yeah.

[01:32]
[Speaker 1]
Okay, okay, okay. Yeah. Then I think that would be really helpful.

[01:37]
[Speaker 2]
Yeah, I'll send you um, I guess right now the best Yeah, I'll send the documentation to you. And then I think there's also a pretty good readme file that's that's kept fresh, um, based on the current schema, but, um, that's in our repository. I'm not sure if everybody has access to that. So I'll also export that for you so you can read it. Okay. Okay. Uh,

[02:09]
[Speaker 1]
Okay. Yeah, I understand. So, uh, like we can directly query from the DB. So is it like, um, so we can connect the read-only DB to our application, right?

[02:23]
[Speaker 2]
Yeah.

[02:24]
[Speaker 3]
Uh, I had shown you in the previous call, right? We connected to the database access. It was already provided few weeks back to us.

[02:34]
[Speaker 1]
Oh. Oh, sorry.

[02:35]
[Speaker 2]
Oh, yeah, yeah. Jeffrey probably already did that.

[02:37]
[Speaker 3]
Yeah, yeah. All that is there. So, uh, right now what we are trying to do is we are figuring out like how to integrate EKB, uh, as, uh, a powering, uh, you know, backend engine for some of the AI use cases we are looking at and develop on, you know, to integrate it on the Dex platform. So, for that, we need, uh, help from two angles. One is, uh, is there any current existing, uh, AI agents which were developed? One of them, uh, I discussed with Rahul and he, uh, showed me a demo of how it is working right now, which was integrated, if I'm not wrong, on the Inspire AI platform. uh, like a chatbot kind of a thing, which will, uh, I think it was a use case for generating, uh, stories, right, Rahul.

[03:26]
[Speaker 1]
Yes, features. Yeah.

[03:28]
[Speaker 3]
Yeah, so we wanted to know what all has been built so far in this space, which uses EKB and, uh, the, uh, Neo4j database, and, uh, what are the things which would add value if we build those kind of agents on the Dex platform. So, since we do not know exactly like what was the scope, what what all has been done so far, uh, uh, in this direction, maybe we are looking for inputs of what has been done so far. And, uh, so that, uh, if if something was already implemented before, because one of the calls when we were showing the demo, they said the chatbot agent was already built, uh, but when we were like looking at, um, uh, how exactly we can use it for Dex, it's not in the form right now which is useful directly to us. So it has to be built, uh, uh, uh, to adapt to the Dex again. So, instead of, uh, you know, maybe building something completely new from scratch, it's good to know beforehand what has been done so far. Uh, I think that's that's what, uh, me and, uh, uh, Vishwa, we both had in mind and, uh, since he couldn't join this call, I want to check with you like, uh, what's been done, like what are the different use cases so far explored, so that, uh, some of the new cases that we have in mind, uh, we wanted to see whether that's useful going forward to be part of Dex or not as well.

[04:57]
[Speaker 2]
Right. Okay. Yeah, I guess um, Rahul can kind of talk to the to the agentic side. Um,

[05:05]
[Speaker 1]
Yeah. Yeah.

[05:06]
[Speaker 2]
Yeah.

[05:08]
[Speaker 1]
So, uh, how we use this EKB on one side is to generate the speech, uh, that is one way what we have. Uh, where we also have a conversational bot on which, uh, you can make a conversation and get this context, uh, for you to groom the features that are already generated by the same agent.

[05:27]
[Speaker 3]
Yes, that's useful for the Inspire, right? Because the whole focus was there is generating stories.

[05:33]
[Speaker 1]
Right. Correct. So, the other one that, uh, that we were also, uh, looking to take this as a test test case or test script generations. So that is something that we are starting to work on, which we didn't do yet. But, yeah, that is how, uh, that also planning to use the EKB.

[05:51]
[Speaker 3]
So the Open Agent platform, we explored some of the use cases which people developed and I was checking for, you know, any test case agent, uh, you know, test case generation agent available on the platform. We couldn't find anything which kind of fits perfectly, uh, which we could directly integrate with the Dex platform. Though, a couple of ones we thought maybe we can reach out to folks who had built it and we did reach out to them and we didn't get any feedback or any kind of, you know, interaction, we couldn't build any interaction with them so far. So we and a couple of folks in our team are already working on that, you know, test case generation, uh, you know, uh, from the like once they launch the developer platform on Coder and once they finish their, you know, build whatever, and then some automatic test unit test case generation will be, like agent will be part of it. That is currently already in the pipeline. Uh, like we are thinking, but we would like to see like, uh, what was the test case generation you guys are working on. Like, how you are thinking of like where where you want to employ, like, uh, what was the like exact use case that you are looking at in terms of the test case generation agent?

[07:07]
[Speaker 1]
So we already have a platform called Test A I. Come on, like Inspire where there was a platform which is called Test A I. So that is already in production and being used by different, uh, Q V, uh, developers, uh, testers.

[07:22]
[Speaker 3]
Oh, I see. Okay.

[07:24]
[Speaker 1]
That is where, uh, right now it's it's not agentic, it's more of prompt calling. They're using the context and everything, but, uh, we wanted to make use of the code summaries that we are generating here to also generate some end-to-end test cases there.

[07:39]
[Speaker 3]
Okay, okay. I see. Okay. Uh, so, uh, which team is doing that right now?

[07:46]
[Speaker 1]
I can tag you. Harita is the lead for Test A I.

[07:49]
[Speaker 3]
Okay.

[07:51]
[Speaker 3]
So, uh, how do folks access that platform? Uh, like is it like a standalone or,

[07:58]
[Speaker 1]
Yeah, Test A I is a standalone tool only. It's there. Let me find the

[08:10]
[Speaker 3]
So, is it like a unit test case generation or like, uh, what kind of test cases they are generating in that application?

[08:19]
[Speaker 1]
Um, I'm not very familiar. It will be, uh, let me,

[08:25]
[Speaker 3]
But does it use EKB in any form or, you know, the Node.js, uh, graph databases as a back-end?

[08:32]
[Speaker 1]
Uh, this part it's not using. The idea is to use this EKB.

[08:36]
[Speaker 3]
I see. And also, like, uh, uh, just wanted to check like what would be the user base for that kind of an application? Like how many folks is it currently, uh, since you mentioned it's already in production, uh, is it like actively used by any group so far?

[08:52]
[Speaker 1]
Uh, there are five or six developers there. Maybe we can ask them better that. But, just

[08:58]
[Speaker 3]
Okay. So, other than these two applications, uh, anything else, uh, that you guys collaborated, uh, uh, uh, in terms of, you know, agents, uh, which use EKB in the backend as well?

[09:13]
[Speaker 1]
Not really.

[09:15]
[Speaker 2]
Not yet.

[09:18]
[Speaker 2]
Sorry, Rahul. Go ahead.

[09:20]
[Speaker 1]
No, no. Uh, that's just what we covered just now.

[09:24]
[Speaker 3]
Uh, so, uh, I also want to check your inputs because when we discussed, uh, uh, the Dex platform with, uh, Amritam team, so far we didn't get any kind of feedback or input regarding what is needed from their side from agents. So we have been like brainstorming so many different ideas and wasn't able to narrow down to what is useful for the business. And, uh, so since, uh, I think, uh, if you can give me some feedback on, uh, so far what you had seen, uh, I mean, uh, any ideas that, um, potentially we can explore from focus point of view, like this is a focus area which would really help, maybe some feedback on, uh, you know, these areas might be useful, something like that would would really help me in terms of, you know, narrowing down the agent scope that we are looking at building for Dex.

[10:21]
[Speaker 2]
I mean, one of the things, actually, I thought of one other thing that we were investigating. I mean, I have less to do with this part, but excuse me. Um, it was um, integrating agent with um, co-pilot. And in that sense, having a, you know, if someone needs Yeah, Rao and team implemented in the on the feature generation side, an ability to sort of drill into a tree, uh, that it sort of shows what's in the knowledge graph. But it it's it's, you know, he demonstrated it the other day, but it's you can kind of drill and see what services, APIs are part of an application. But I think that same functionality is hope to be exposed in from within an IDE, you know, Visual Studio where you can use the agent through the chat window there and ask, you know, what is you start to interrogate, um, the EKB from there. And um, I think whatever we did so far is a little bit of a proof of concept, I would say. I mean, if I'm, you know, correct me where I go wrong here, but that would be one space I think we would add value.

[11:53]
[Speaker 3]
Sure. Yeah, yeah. Uh, definitely, definitely. Uh, I'll I'll discuss this with Vishwa also and see like, uh, because right now, uh, when we spoke to Shrini last time, uh, there are two things which, uh, uh, stood out from that discussion. One is, um, using EKB actively and exploring various use cases to use it. The second one is, we mentioned like we started with this unit test generation agent for Dex, uh, to to begin with because so far we haven't been able to onboard any pilot application because the teams yet to come on board with us to start testing the Dex platform which is in the current state. So we are still, uh, uh, trying to figure out like, uh, you know, to complete the whole, uh, uh, end-to-end, uh, how the Dex is, uh, with, uh, with the for the pilot application, that that's still in progress. So in the meanwhile, uh, we are just trying to figure out like what would be best use cases, uh, uh, apart from the unit test case and, you know, integrate, uh, EKB also. The one which you mentioned, we we have been thinking about it, uh, but yeah, I mean, uh, yeah, so far we are not sure like, um, how, uh, how much of, uh, you know, interest the team has in terms of, uh, uh, yeah, I mean, in terms of implementing it. So we are still, uh, at the stage where we are like looking for feedback and inputs.

[13:32]
[Speaker 2]
Okay.

[13:35]
[Speaker 3]
Uh, and so so so uh, so right now all, uh, uh, uh, all we know is like, uh, these are the two use cases, uh, uh, people are using EKB. And, uh, anything else that, uh, uh, that we need to or we need to reach out to any other team who is working on it, which can provide any other inputs on how they are doing it.

[14:04]
[Speaker 2]
I can't think of any team. Um,

[14:07]
[Speaker 1]
No idea. Maybe Ganesh is aware of anyone, I'm not sure, but

[14:12]
[Speaker 3]
Because if we propose some ideas, just wanted to make sure like it's it's kind of at least like, um, uh, maybe new. And also, uh, just give me one moment. I want to share one, uh, document, uh, uh, so we wanted to check, uh, which of the applications could be, uh, could use, uh, EKB in this because this one we showed it to Shrini, uh, a few days back. And, uh, he suggested like, uh, whichever application can use the EKB, uh, they can, uh, they can be prioritized for implementation. So, so we just wanted to check your inputs as well on that.

[15:02]
[Speaker 1]
Okay.

[15:13]
[Speaker 2]
Could you zoom in just a touch on the, um, text please?

[15:17]
[Speaker 3]
Yeah.

[15:19]
[Speaker 2]
Thank you.

[15:33]
[Speaker 2]
Thanks.

[15:35]
[Speaker 3]
Is this better?

[15:36]
[Speaker 2]
Yeah, that's better. Thank you.

[15:44]
[Speaker 3]
Uh, so, the first one is, uh, basically these are, uh, some of the ideas people have been using, uh, on Coder, like some of the agents which they are building, uh, as Coder as their backend. So, the one is this, uh, agent which can do refactoring, uh, in the Coder space itself. Uh, so that's one agent, uh, so automated, uh, code refactoring, uh, agent which could be part of the Coder. Uh, so does can can this be used with EKB in terms of that refactoring, uh, part?

[16:21]
[Speaker 2]
I I would ex, well, the the EKB, I would say has some specific information and some general information. And I think any kind of refactoring is possible. You could get some context from EKB, but I would also expect it to work directly from um, that's a tricky one directly from the code. Uh, any kind of like large scale re-architecting, um, there might be some context that could be given from the EKB for the larger bits. But it doesn't have any, you know, it doesn't have any code, for example.

[17:06]
[Speaker 3]
Okay.

[17:07]
[Speaker 4]
Um, a quick question on this. So, what I'm what I'm seeing here is a lot of this looks like it's about, you know, either translating code to a new language or changing the style of that code. Um, and so I is there any other refactoring use cases you would look at? Because the EKB is really only going to help if you care about the way the different services relate to each other, for example. If you're just going to be changing the format of code, the EKB doesn't it doesn't have anything to offer there really.

[17:40]
[Speaker 2]
Right.

[17:41]
[Speaker 3]
So this one is about, uh, migrating legacy code to modern frameworks. I mean, I don't know how many use cases right now, uh, needs this one, because we don't have visibility into, like, what are the different use cases developers are dealing with right now. But, uh, yeah, I mean, does this require EKB in terms of migrating the code? Maybe, maybe not, right?

[18:06]
[Speaker 2]
I would say no for this one.

[18:07]
[Speaker 4]
I would say no.

[18:08]
[Speaker 3]
Yeah. Okay.

[18:09]
[Speaker 4]
I think the reason I'd say no is because when I'm seeing, um, talk about legacy code to modern frameworks, my understanding, which is kind of an odd, is something akin to moving from Matplotlib to Seaborn, for example, where there's a newer version of a library that tends to work a bit better, or maybe moving from TensorFlow to PyTorch. Um, those are not things that the EKB would have any stay on, since the EKB talks with Verizon applications, not about general technological applications.

[18:31]
[Speaker 3]
Yeah. Got it. Got it. Agree. Yeah. Got it.

[18:42]
[Speaker 3]
And the other one is like, uh, you know, bug bug triage and repair. Uh, so, uh, basically this is kind of what we are also doing, right? Uh, because we are getting the tickets onto the Dex from Jira only, and then identifying new bug reports and attempting to fix them autonomously. Right now we are like on Dex, it's not autonomous. A developer is doing the whole fix and then closing the Coder platform. Uh, but this one is about like, it it tries to fix by itself and then close the ticket also. I don't know whether how far, um, this will be part of the implementation. But something like this kind of a use case might get help from, you know, EKB, uh, uh, so,

[19:33]
[Speaker 2]
It it's possible. This is similar to the use case of, you know, generating a feature then using that feature to write user stories and then those stories become code. So, I mean, it it would take it it would be a starting point, the EKB maybe, and and a similar way that the feature generation tool is uses it. Um, but, um, I guess you would have to know what it would be helpful to know what's like a have a starting point, like what service was the bug was or at least the application the bug was being reported against or

[20:23]
[Speaker 3]
Yes. Yes. Agree. Yeah.

[20:25]
[Speaker 2]
So starting from that, it it may be that the EKB could, you know, because there's the uh, repositories are there and um, sort of a description and the relationships are there. But it you would have to have a sort of a starting point to get it started.

[20:46]
[Speaker 3]
Yes.

[20:47]
[Speaker 4]
I see. As a point to kind of add on to that, I I think a lot of it depends on what the bug report does and does not contain. Because if the bug report says, you know, hey, I am in um, I loaded up NPP and I'm getting a blank screen. Then that's a case where I could see having general context on the services inside NPP and how they operate might be relevant. But if the bug report is saying something to the extent of, you know, I I ran this, you know, I I did this operation in PP and I got this error code, then that's something where you can almost certainly track that down to the file or the files where this occurred in. And once you've identified those files, I would very strongly doubt that the EKB could add relevant context that wouldn't be present in those already. So, what kind of bug reports are you getting, kind of which one of those is it closer to?

[21:52]
[Speaker 3]
Or is it both? Yeah, right now we do not know like, uh, which kind of use cases we are going to deal with. Uh, maybe once we know more about it, uh, yeah, right now this is just one proposing idea, because, uh, we don't know like what kind of bugs folks are having, what kind of use cases. We don't have any visibility into the different use cases as of now. But it's just one of the proposing ideas based, I mean, we will see like the requirement for this and then maybe consider the implementation of this idea.

[22:27]
[Speaker 4]
Yeah, I think I guess the reason I'm a little bit doubtful on this is that the EKB's focus is more on on on broad context than it is on service level specificity. So, while we do have code summaries in the EKB, they're only summaries, and so they're just going to give you just what some code does, and it's not going to go into more detail than that. So, if if a bug manifests at the level of multiple services operating with each other in different screens and APIs and table database tables, that's a great place for the EKB, because it describes those relationships. If the bug is going to be something within a specific service, then the EKB really can't do the EKB is just going to be telling the agent a summary the agent could have produced itself. And that's not going to be particularly useful, I don't think.

[23:20]
[Speaker 3]
No, got it. I understand. Uh, the other one is like security vulnerability patching. Um, uh, so, this one also might not, uh, uh, need EKB actively, I guess.

[23:39]
[Speaker 2]
Agree.

[23:40]
[Speaker 4]
Yeah, I I agree, especially since it's patching security stuff. Yeah, I think we have that.

[23:44]
[Speaker 3]
Okay. And then, uh, like CICD and pull request analysis. This one is also probably,

[23:53]
[Speaker 2]
Yeah, we don't have any kind of branch or any, we don't have that level of detail in the EKB.

[23:59]
[Speaker 4]
Mhm. Mhm. Yeah, exactly.

[24:01]
[Speaker 2]
I think there's a desire to have it, but it's also kind of not it's not um, it's not on our road map right now.

[24:12]
[Speaker 3]
So this one, on-demand prototyping and docs to demo workflows. This might be, uh, these have some utility, I guess, because, uh, in order to build from docs to demo, my EKB info can be quite helpful for an agent to build.

[24:31]
[Speaker 2]
Yeah. I can see that.

[25:04]
[Speaker 4]
This is something I see more potential for the EKB.

[25:06]
[Speaker 3]
Hmm.

[25:07]
[Speaker 4]
Um, I think there's still an element of since this is focused on code generation, there's not a huge amount of context to be brought in. Um, so I'm I guess I don't think the EKB would drive this. However, it might be able to tell you, hey, you know, for an API with this kind of functionality, you might, you know, you typically want to reference these sorts of database tables, or you you know, this might be part of this service. I could see where there's overlap there. I don't think it's huge. But I think there's an element where EKB could be a, I would guess non-core, but contributing part to this. That would be my intuition.

[25:21]
[Speaker 3]
Mhm.

[25:50]
[Speaker 2]
It could be part of that early stage research where you go look through and say, oh, well, these are probably, you know, repos where I would find more, you know, where I can look next.

[26:03]
[Speaker 4]
Yep. Yep. Yes. I think I think that's a really good idea for that. Um, I think that's that that would live.

[26:08]
[Speaker 3]
Yeah. Got it. Got it. Yeah, so, uh, so we can consider, uh, uh, from EKB perspective this one and, uh, and maybe to some extent this second one. Yeah. That also with some limitations it has, but rest all I don't think they might even need EKB, uh, uh, support to get implemented. Uh, so is see, along similar lines, uh, any other, uh, use cases, uh, potentially that, uh, that might, uh, you know, that might be impactful, uh, if we use EKB. Um, We don't have it today, but just something to keep in mind that right now what what one of the big tasks we're looking, well, we're trying to understand how we're going to handle it is there is has been a requirement to bring documents, like documentation, like high level design documents that have diagrams or, um, different kinds of documentation, confluence pages, like, um, into the graph. And it's not necessarily going to be part of the Neo4j instance. It might be sitting in, um, a second graph that's kind of joined to Neo4j, like Rag graph. And, um, we haven't really landed on, um, what the boundaries of the documents we would ingest are. Um, so that that might change the level of detail that would be available, but we don't have that right now, and we don't we don't have it, you know, we haven't landed on the design for that yet. It will probably will be pretty soon. And another, um, sort of similar, um, kind of use or another similar, maybe parallel kind of use case is, um, there's been a, you know, it's always been on our road map to have more information about screens and be able to point to imagery about screen design or possibly files, like Figma files or if those kind of, um, also document-based, um, data. Um, and we don't have that yet, but at the point where that, um, when and if that starts to be ingested, that might be useful. There's also high level discussion with sit up, um, or architectural question about how, um, rather I think that maybe a few months ago might the original vision might have been to have sort of a giant, uh, knowledge graph containing like every detail. And I think that is I think that right now that it seems like that there's sort of moving away from that idea and having more of a federated model. So, we'll have to figure out how to, you know, join, there'll be other graphs that maybe maybe the screen and UI will have a its own dedicated knowledge base and and will sort of join those. That's not designed yet, but we're we're sort of in the middle of talking about like the the road map for all of the like how to collect all of the level of detail that we want and not have it too unwieldy in one knowledge graph. Because we want it to scale.

[30:02]
[Speaker 4]
Yeah. Yep. Mhm. Yeah. Yeah.

[30:04]
[Speaker 3]
Actually, there's like lot of wonderful ideas that could be that could utilize EKB, but may or may not be joining with EKB and Dex. So, that's that's one challenge right now. Like we can think of multiple ideas along the lines of understanding the data and visualizing the data on EKB. Other aspect is like but because Dex only uses the backend Jira tickets.

[30:14]
[Speaker 4]
Yeah. Mhm. Yeah.

[30:36]
[Speaker 2]
Okay.

[30:37]
[Speaker 3]
So, so is it like do we have to take a info useful to Dex from EKB what is needed or in order to maximize the potential of EKB do we have any other standalone, uh, you know, use case agentic use case which could utilize the EKB in in its form. So these are where we are like trying to figure out what what's the way to go forward.

[31:11]
[Speaker 4]
If I could step in. I think the the I just want to offer a framework that might help with the way that we think about this, which is the way that I look at the EKB is and I I've mentioned this before in this meeting. It's it's about multi-system context. How do multiple services relate? How do they talk to database or applications? Um, how do they relate to different initiatives of Verizon? That's the kind of stuff that that the EKB is going to do very, very well. When you're focusing on one specific element, the EKB doesn't really have as much to offer there. So and I think I think to me a lot of the question of where can we use the EKB really turns into what Dex projects do we have that have multi-system dependencies? Because those are where the EKB can start to offer a lot of value, because it models those dependencies that understands them and it can do it could extrapolate information based off of them when combined with some sort of agentic system. So, do you have any use cases like that where you have some sort of multi-service or multi-system development project?

[32:19]
[Speaker 3]
Uh, to be honest, right now we don't have anything along those lines, uh, because the the one system that we are currently building, Dex, is not completely about like multi-system utilization. It's more about providing productivity for the developer which who wants to fix their, you know, the tasks which are provided to them through Jira. That that's the only focus of Dex. But, uh, we want to expand on it and, uh, see like what all we can bring in, uh, or more functionality for the Dex going forward. So, this this whole exercise is you just to understand any agentic possibilities which can expand and which could be part of the Dex to deliver those kinds of, uh, functionalities.

[33:15]
[Speaker 2]
Mhm.

[33:20]
[Speaker 2]
Yeah.

[33:22]
[Speaker 3]
Yeah, so, uh, thank you so much for your inputs. Uh, that Vaishnav, you have anything else you wanted to check right now?

[33:32]
[Speaker 1]
Ah, no, right now I just mentioned, right? So, uh, once we have any like few pilot applications, so maybe, uh, in that, right now we don't have any applications with us which have any multi-dependency, but maybe, uh, we might find few applications when we start onboarding users. So, at that time maybe, uh, EKB will be useful for us.

[33:58]
[Speaker 2]
Well, it let us know if you, you know, if there's something that comes up and you have questions as that starts to ramp up and you have specific kind of, you know, problem or something, let us know.

[34:13]
[Speaker 1]
That's sure. Yeah.

[34:14]
[Speaker 3]
Yeah, yeah. Sure, definitely. For sure. Yeah. Thank you so much, uh, for all your inputs. Uh, I'll discuss these things with Vishwa also and talk to him and then reach out to you, uh, whenever we face, uh, you know, any questions and then, uh, yeah, I'll talk to you again.

[34:34]
[Speaker 2]
Okay. Yeah, we'll we'll keep thinking, you know, if if we end up expanding, you know, when documentation comes in or when, um, some of these other elements that are on a road map, we'll keep keep you updated.

[34:48]
[Speaker 3]
Yeah. Yeah. That would be great. Yeah. Thank you so much. Everyone. Yeah. Thanks.

[34:52]
[Speaker 1]
Thanks. Yeah. Thank you. Thank you. Thanks. Yeah. Thanks.

[34:59]
[Speaker 3]
Bye.